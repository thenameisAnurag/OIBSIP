# -*- coding: utf-8 -*-
"""Oasis Task 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L27Z_yC13lxkVk-WrQc_NvDbmhzoJWbg

Name - Anurag Mishra

# Task 3
CAR PRICE PREDICTION WITH MACHINE LEARNING
"""

import pandas as pd
import matplotlib.pyplot as plt

data=pd.read_csv('CarPrice_Assignment.csv')
data

data.head()

"""Checking the length of the data"""

data.shape

data.describe()

data.info()

data.isnull().sum()

"""Categorising the data

*   fuel type (gas , diesel)
*   aspiration type (turbo, std)
*   carbody type(sedan, hatchback, wagon ,hardtop , convertible )


"""

print(data.fueltype.value_counts())
print(data.aspiration.value_counts())
print(data.carbody.value_counts())

"""Converting  the Categorical Data
fuel type and aspiration in 0 & 1
"""

data.replace({'fueltype': {'gas': 0, 'diesel': 1}}, inplace=True)
data.replace({'aspiration': {'std': 0, 'turbo': 1}}, inplace=True)

data.head()

info=pd.read_excel('/content/Data Dictionary - carprices.xlsx')
info

"""# Modeling the data

*   Linear Regression
* Lasso Regression


"""

from sklearn.model_selection import train_test_split;
from sklearn.linear_model import LinearRegression;
from sklearn.metrics import accuracy_score

X=data.drop('price', axis=1) #----------->Target variable
Y=data['price']
X_encoded = pd.get_dummies(X) #-------> Using One Hot ENCODING (converting categorical data to numeric data )
X_train,X_test,Y_train,Y_test=train_test_split(X_encoded,Y,test_size=0.3,random_state=2)

model=LinearRegression()
model.fit(X_train, Y_train)
Predict=model.predict(X_test)

"""# Evaluating The Model


---
Mean squared Test



"""

mse = mean_squared_error(Y_test, Predict)


print("Mean Squared Error: ",mse)

plt.scatter(Y_test,Predict)
plt.title('Using Linear Regression Model')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

"""Lasso Regression Model"""

from sklearn.linear_model import Lasso
model=Lasso()
alpha = 1.0
model = Lasso(alpha=alpha)
model.fit(X_train, Y_train)
Predict = model.predict(X_test)

"""Using R Squared Test For Model Evaluation"""

r2 = r2_score(Y_test, Predict)
print(f"R-squared (R2): {r2}")

plt.scatter(Y_test,Predict,alpha=0.7)
plt.title('Using Lasso Regression Model')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

