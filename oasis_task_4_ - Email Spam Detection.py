# -*- coding: utf-8 -*-
"""Oasis Task 4 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16FTnjrNDeRbZ3Kp3KJFra43c-o5vX4DK

# Name - Anurag Mishra

# Task 4
EMAIL SPAM DETECTION WITH MACHINE LEARNING
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

data =pd.read_csv('/content/spam.csv', encoding='latin-1')
data

data.head()

data.shape

data.info()

data.isnull().sum()

"""Removing The Null Values - Cleaning The Data"""

spam=data[['v1','v2']]
spam

spam.info()

msg=spam['v2']
inbox=spam['v1']

print(msg[0])

print(msg)

print(inbox)

"""# Data Visulaization
Creating a Pie Chart For The HAM and Spam Mail
"""

category_counts = data['v1'].value_counts()


labels = category_counts.index
sizes = category_counts.values
colors = ['gold', 'lightgreen']
explode = (0.1, 0)

plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=120)
plt.axis('equal')
plt.title('Distribution of Ham and Spam Emails')
plt.show()

"""Modeling The Data"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(msg,inbox,test_size=0.2,random_state=2)

"""Preprocessing The Data


---
Tokenizing The Data

"""

from sklearn.feature_extraction.text import TfidfVectorizer
vector = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
X_train_vect = vector.fit_transform(X_train)
X_test_vect = vector.transform(X_test)

"""# Encoding Data

---

using Label Encoder & Map Function
"""

label_encoder = LabelEncoder()
Y_train_encoded = label_encoder.fit_transform(Y_train)
Y_test_encoded = label_encoder.transform(Y_test)

"""Training the Model Using Logistic Regression"""

model = LogisticRegression(penalty='l2')
model.fit(X_train_vect, Y_train_encoded)
predict_train = model.predict(X_train_vect)
predict_test = model.predict(X_test_vect)

from sklearn.metrics import accuracy_score
accuracy=accuracy_score(Y_train_encoded,predict_train)
print('The Accuracy Score is :',accuracy*100)

accuracy_test=accuracy_score(Y_test_encoded,predict_test)
print('The Accuracy Score is :',accuracy_test*100)

def classify_email(input_mail):
    input_mail_feature = vector.transform([input_mail])
    prediction = model.predict(input_mail_feature)
    decoded_prediction = label_encoder.inverse_transform(prediction)
    if decoded_prediction=='spam':
        print('Spam Mail')
    else:
        print('Ham Mail')

# Test the model with example emails
classify_email("Go until jurong point, crazy.. Available only ...".lower())